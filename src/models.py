from pydantic import BaseModel, field_validator
from typing import Optional, Union, Literal
from enum import Enum


class Events(str, Enum):
    mentions_recent_mergers_and_acquisitions = "Mentions recent mergers and acquisitions"
    has_leadership_changes = "has_leadership_changes"
    has_layoffs = "has_layoffs"
    has_executive_compensation = "has_executive_compensation"
    has_rnd_investment_numbers = "has_rnd_investment_numbers"
    has_new_product_launches = "has_new_product_launches"
    has_capital_expenditures = "has_capital_expenditures"
    has_financial_performance_indicators = "has_financial_performance_indicators"
    has_dividend_policy_changes = "has_dividend_policy_changes"
    has_share_buyback_plans = "has_share_buyback_plans"
    has_capital_structure_changes = "has_capital_structure_changes"
    mentions_new_risk_factors = "mentions_new_risk_factors"
    has_guidance_updates = "has_guidance_updates"
    has_regulatory_or_litigation_issues = "has_regulatory_or_litigation_issues"
    has_strategic_restructuring = "has_strategic_restructuring"
    has_supply_chain_disruptions = "has_supply_chain_disruptions"
    has_esg_initiatives = "has_esg_initiatives"

class AnnualEvents(BaseModel):
    event_type: Events
    events_src_pdf_page: list[int]


class FinancialServicesMetrics(str, Enum):
    """Metrics specific to the financial services industry"""
    total_assets = "Total assets on balance sheet at year-end"
    total_deposits = "Total deposits at year-end"
    loans_outstanding = "Loans outstanding at year-end"
    assets_under_management = "Assets under management (AUM)"
    non_performing_loan_ratio = "Non-performing loan ratio (NPL) at year-end"
    tier1_capital_ratio = "Tier 1 capital ratio at year-end"
    customer_accounts = "Number of customer accounts at year-end"
    branch_count = "Branch count at year-end"
    net_interest_margin = "End-of-year net interest margin (NIM)"
    return_on_equity = "Return on equity (ROE) at year-end"

class TechnologyMetrics(str, Enum):
    number_of_patents = "Number of patents at year-end"
    total_capitalized_rd_expenditure = "Total capitalized R&D expenditure"
    total_expensed_rd_expenditure = "Total expensed R&D expenditure"
    end_of_year_tech_staff_headcount = "End-of-year tech staff headcount"
    end_of_year_total_headcount = "End-of-year total headcount"
    annual_recurring_revenue = "Annual recurring revenue (ARR)"
    total_intangible_assets = "Total intangible assets (IP valuation)"
    number_of_active_software_licenses = "Number of active software licenses"
    data_center_capacity_mw = "Data center capacity (MW)"
    data_center_capacity_sq_ft = "Data center capacity (sq. ft.)"
    cloud_storage_capacity_tb = "Cloud storage capacity (TB)"
    end_of_period_market_capitalization = "End-of-period market capitalization"
    year_end_customer_base = "Year-end customer base"
    year_end_user_base = "Year-end user base"

class HealthcareMetrics(str, Enum):
    number_of_hospital_beds = "Number of hospital beds at year-end"
    number_of_owned_clinics = "Number of owned clinics at year-end"
    number_of_managed_clinics = "Number of managed clinics at year-end"
    active_patient_count = "Active patient count (registered patients)"
    value_of_medical_equipment = "Value of medical equipment (balance sheet)"
    end_of_year_bed_occupancy_rate = "End-of-year bed occupancy rate"
    number_of_healthcare_professionals = "Number of healthcare professionals on staff"
    number_of_laboratories = "Number of laboratories at year-end"
    number_of_diagnostic_centers = "Number of diagnostic centers at year-end"
    healthcare_plan_memberships = "Healthcare plan memberships (if applicable)"
    outstanding_insurance_claims = "Outstanding insurance claims (if applicable)"
    rd_pipeline = "R&D pipeline (number of therapies in phases)"

class AutomotiveMetrics(str, Enum):
    vehicle_production_capacity = "Vehicle production capacity (units/year)"
    inventory_of_finished_vehicles = "Inventory of finished vehicles at year-end"
    global_dealership_network_size = "Global dealership network size"
    number_of_electric_models_available = "Number of electric models available"
    number_of_hybrid_models_available = "Number of hybrid models available"
    battery_production_capacity = "Battery production capacity (if applicable)"
    end_of_year_automotive_patent_portfolio = "End-of-year automotive patent portfolio"
    end_of_period_market_share = "End-of-period market share (by units sold)"
    number_of_ev_charging_stations = "Number of EV charging stations in network"
    year_end_fleet_average_co2_emissions = "Year-end fleet average CO₂ emissions"
    rd_workforce_headcount = "R&D workforce headcount"


class RetailMetrics(str, Enum):
    number_of_stores = "Number of stores at year-end"
    total_store_floor_area_sqm = "Total store floor area (sqm)"
    total_store_floor_area_sq_ft = "Total store floor area (sq. ft.)"
    value_of_inventory_on_hand = "Value of inventory on hand at year-end"
    number_of_distribution_centers = "Number of distribution centers at year-end"
    number_of_fulfillment_centers = "Number of fulfillment centers at year-end"
    loyalty_program_membership = "Loyalty program membership at year-end"
    online_active_customer_accounts = "Online active customer accounts"
    ecommerce_active_customer_accounts = "E-commerce active customer accounts"
    year_end_store_employee_headcount = "Year-end store employee headcount"
    private_label_skus_in_portfolio = "Private label SKUs in portfolio"
    number_of_new_store_openings = "Number of new store openings (cumulative in year)"
    online_order_fulfillment_capacity = "Online order fulfillment capacity (daily)"

class EnergyAndUtilitiesMetrics(str, Enum):
    total_power_generation_capacity = "Total power generation capacity (MW)"
    number_of_power_plants = "Number of power plants at year-end"
    number_of_facilities = "Number of facilities at year-end"
    percentage_of_renewable_energy_capacity = "Percentage of renewable energy capacity"
    transmission_network_length = "Transmission network length"
    distribution_network_length = "Distribution network length"
    total_number_of_customers_connected = "Total number of customers connected"
    proven_oil_reserves = "Proven oil reserves (if applicable)"
    proven_gas_reserves = "Proven gas reserves (if applicable)"
    refinery_throughput_capacity = "Refinery throughput capacity"
    pipeline_network_length = "Pipeline network length"
    greenhouse_gas_emissions_intensity = "Greenhouse gas emissions intensity (CO₂/MWh)"
    year_end_weighted_average_cost_of_energy_production = "Year-end weighted average cost of energy production"

class HospitalityMetrics(str, Enum):
    number_of_properties = "Number of properties at year-end"
    number_of_hotels = "Number of hotels at year-end"
    total_number_of_rooms_available = "Total number of rooms available"
    year_end_occupancy_rate = "Year-end occupancy rate"
    average_daily_rate = "Average daily rate (ADR) at final period"
    revenue_per_available_room = "Revenue per available room (RevPAR) at final period"
    loyalty_program_membership_hospitality = "Loyalty program membership at year-end"
    number_of_restaurants = "Number of restaurants"
    number_of_bars = "Number of bars"
    conference_banquet_space_capacity = "Conference/banquet space capacity (sq. ft.)"
    franchise_agreements_in_force = "Franchise agreements in force"
    hospitality_workforce_headcount = "Hospitality workforce headcount"

class TelecommunicationsMetrics(str, Enum):
    mobile_subscriber_base = "Mobile subscriber base at year-end"
    broadband_subscriber_base = "Broadband subscriber base at year-end"
    mobile_coverage_area_population = "Mobile coverage area (population %)"
    mobile_coverage_area_geography = "Mobile coverage area (geography %)"
    number_of_broadband_subscribers = "Number of broadband subscribers"
    number_of_fiber_subscribers = "Number of fiber subscribers"
    fiber_network_length_km = "Fiber network length (km)"
    fiber_network_length_miles = "Fiber network length (miles)"
    average_revenue_per_user = "Average revenue per user (ARPU) at year-end"
    five_g_coverage_ratio = "5G coverage ratio (population %)"
    data_center_capacity_mw = "Data center capacity (MW)"
    data_center_capacity_racks = "Data center capacity (racks)"
    number_of_retail_stores = "Number of retail stores"
    number_of_service_stores = "Number of service stores"
    network_downtime_hours = "Network downtime (hours) in final reporting period"

class MediaAndEntertainmentMetrics(str, Enum):
    number_of_streaming_platform_subscribers = "Number of streaming platform subscribers"
    number_of_online_platform_subscribers = "Number of online platform subscribers"
    broadcast_coverage_area = "Broadcast coverage area (population reach)"
    advertising_inventory = "Advertising inventory at year-end"
    number_of_active_licensing_deals = "Number of active licensing deals"
    size_of_film_tv_content_library_hours = "Size of film/TV content library (hours)"
    size_of_film_tv_content_library_titles = "Size of film/TV content library (titles)"
    social_media_follower_count = "Social media follower count (all platforms)"
    year_end_box_office_market_share = "Year-end box office market share (if applicable)"
    number_of_production_facilities = "Number of production facilities"
    in_house_production_capacity = "In-house production capacity (titles/year)"
    headcount_for_creative_roles = "Headcount for creative roles"
    headcount_for_production_roles = "Headcount for production roles"

class PharmaceuticalsMetrics(str, Enum):
    number_of_drugs_on_market = "Number of drugs on the market (approved)"
    number_of_compounds_phase_i = "Number of compounds in Phase I"
    number_of_compounds_phase_ii = "Number of compounds in Phase II"
    number_of_compounds_phase_iii = "Number of compounds in Phase III"
    manufacturing_capacity_units = "Manufacturing capacity (units/year)"
    manufacturing_capacity_liters = "Manufacturing capacity (liters/year)"
    global_distribution_network = "Global distribution network (markets served)"
    number_of_active_pharmaceutical_patents = "Number of active pharmaceutical patents"
    clinical_trial_sites_operating = "Clinical trial sites operating at year-end"
    inventory_of_active_pharmaceutical_ingredients = "Inventory of active pharmaceutical ingredients"
    size_of_sales_force = "Size of sales force (year-end)"
    pharmacovigilance_reports = "Pharmacovigilance reports (adverse events logged)"
    branded_product_count = "Branded product count"
    generic_product_count = "Generic product count"

class AerospaceAndDefenseMetrics(str, Enum):
    order_backlog_value = "Order backlog (value) at year-end"
    order_backlog_units = "Order backlog (units) at year-end"
    production_capacity_aircraft = "Production capacity (aircraft/year)"
    production_capacity_units = "Production capacity (units/year)"
    number_of_defense_contracts_active = "Number of defense contracts active"
    number_of_government_contracts_active = "Number of government contracts active"
    rd_spending_on_advanced_programs = "R&D spending on advanced programs"
    number_of_employees_with_security_clearance = "Number of employees with security clearance"
    military_products_in_service_units = "Military products in service (units)"
    defense_products_in_service_units = "Defense products in service (units)"
    satellite_capacity_in_orbit = "Satellite capacity in orbit"
    spacecraft_capacity_in_orbit = "Spacecraft capacity in orbit"
    facilities_footprint_sq_ft = "Facilities footprint (sq. ft.)"
    facilities_footprint_number_of_sites = "Facilities footprint (number of sites)"
    year_end_patent_portfolio = "Year-end patent portfolio (aerospace tech)"
    partnerships_with_government_agencies = "Partnerships with government agencies at year-end"

class TransportAndLogisticsMetrics(str, Enum):
    fleet_size_vehicles = "Fleet size (vehicles) at year-end"
    fleet_size_aircraft = "Fleet size (aircraft) at year-end"
    fleet_size_vessels = "Fleet size (vessels) at year-end"
    warehouse_capacity_sq_ft = "Warehouse capacity (sq. ft.)"
    warehouse_capacity_cubic_ft = "Warehouse capacity (cubic ft.)"
    number_of_distribution_hubs = "Number of distribution hubs"
    global_route_coverage_countries = "Global route coverage (countries served)"
    global_route_coverage_regions = "Global route coverage (regions served)"
    final_period_on_time_delivery_rate = "Final-period on-time delivery rate"
    freight_volume_capacity_teu = "Freight volume capacity (TEU)"
    freight_volume_capacity_tons = "Freight volume capacity (tons)"
    fuel_consumption_rate_liters = "Fuel consumption rate (liters/year)"
    fuel_consumption_rate_per_mile = "Fuel consumption rate (per mile)"
    co2_emissions_from_operations = "CO₂ emissions from operations (ton/year)"
    year_end_logistics_staff_headcount = "Year-end logistics staff headcount"
    infrastructure_investments_completed = "Infrastructure investments completed in the period"

class FoodAndBeverageMetrics(str, Enum):
    production_capacity_bottling = "Production capacity (e.g., bottling liters/hour)"
    number_of_manufacturing_plants = "Number of manufacturing plants"
    number_of_warehouses_in_distribution_network = "Number of warehouses in distribution network"
    number_of_depots_in_distribution_network = "Number of depots in distribution network"
    sku_count_in_portfolio = "SKU count in portfolio"
    raw_material_supply_contracts = "Raw material supply contracts"
    inventory_of_raw_materials = "Inventory of raw materials at year-end"
    number_of_company_owned_outlets = "Number of company-owned outlets"
    number_of_franchised_outlets = "Number of franchised outlets"
    year_end_market_share_by_product_category = "Year-end market share (by product category)"
    food_safety_certifications = "Food safety certifications (sites certified)"
    brand_portfolio_size = "Brand portfolio size (distinct brands at year-end)"


class FinMetric(str, Enum):
    RAD_EXPENSES = "research and development expenses"
    RISK_MANAGEMENT_SPENDING = "risk management spending"
    RETURN_ON_ASSETS = "return on assets (ROA)"
    CUSTOMER_ACQUISITION_SPENDING = "customer acquisition spending"
    OPERATING_MARGIN = "operating margin"
    MARKET_CAPITALIZATION = "market capitalization"
    SUSTAINABILITY_INITIATIVES_SPENDING = "sustainability initiatives spending"
    GROSS_PROFIT_MARGIN = "gross profit margin"
    NET_PROFIT_MARGIN = "net profit margin"
    TOTAL_LIABILITIES = "total liabilities"
    TOTAL_ASSETS = "total assets"
    INTANGIBLE_ASSETS = "intangible assets"
    MARKETING_SPENDING = "marketing spending"
    FREE_CASH_FLOW = "free cash flow"
    EARNINGS_PER_SHARE = "earnings per share (EPS)"
    ACCOUNTS_RECEIVABLE = "accounts receivable"
    ACQUISITION_COSTS = "acquisition costs"
    SHAREHOLDERS_EQUITY = "shareholders' equity"
    OPERATING_CASH_FLOW = "operating cash flow"
    QUICK_RATIO = "quick ratio"
    NET_INCOME = "net income"
    INVENTORY = "inventory"
    TOTAL_REVENUE = "total revenue"
    OPERATING_INCOME = "operating income"
    GROSS_MARGIN = "gross margin"
    EBITDA = "EBITDA"
    CAPITAL_EXPENDITURES = "capital expenditures"
    CASH_FLOW_FROM_OPERATIONS = "cash flow from operations"
    LONG_TERM_DEBT = "long-term debt"
    DIVIDEND_PER_SHARE = "dividend per share"

class FinMetricData(BaseModel):
    fin_metric_type: FinMetric
    fin_metrics_src_pdf_page: list[int]